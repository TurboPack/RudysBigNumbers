unit TestVelthuisBigIntRandom;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Velthuis.RandomNumbers;

type

  TestBigIntRandom = class(TTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    // https://github.com/rvelthuis/DelphiBigNumbers/issues/17
    procedure TestParseHugeBase12;
    // https://github.com/TurboPack/RudysBigNumbers/pull/10
    procedure TestTRandomBaseNextBytes;
    procedure TestTRandomNext;
    // Tests for fixes demonstrated in U_Random_2.pas
    procedure TestParseHugeBase12_UInt32;
    procedure TestTRandomBaseNextBytes_with_UInt32;
    procedure TestTRandomNext_with_Flags;
  end;

implementation
uses System.SysUtils, Velthuis.BigIntegers, U_Random_2;


procedure TestBigIntRandom.TestParseHugeBase12;
var
  N,M : BigInteger;
  NS, MS: string;
  R : IRandom;
  NumBits: Integer;
begin
  R := TDelphiRandom.Create(-332888001);
  NumBits := Random(100)*1000;
  N := BigInteger.Create(NumBits, R);
  BigInteger.Base := 12;
  NS := N.ToString();
  BigInteger.TryParse(NS, M);
  MS := M.ToString();
  CheckEquals(NS, MS, 'Parsed value differs from the original!');
end;


procedure TestBigIntRandom.TestParseHugeBase12_UInt32;
var
  N,M : BigInteger;
  NS, MS: string;
  R : IRandom;
  NumBits: Integer;
begin
  R := TDelphiRandom2.Create(-332888001);
  NumBits := Random(100)*1000;
  N := BigInteger2.Create(NumBits, R).BigInt;
  BigInteger.Base := 12;
  NS := N.ToString();
  BigInteger.TryParse(NS, M);
  MS := M.ToString();
  CheckEquals(NS, MS, 'Parsed value differs from the original!');
end;


procedure TestBigIntRandom.TestTRandomBaseNextBytes;
var
  R : IRandom;
  i : Integer;
begin
    R := TRandom.Create(0);
    for i:= 1 to 6 do
        BigInteger.Create(20,R);
end;


procedure TestBigIntRandom.TestTRandomBaseNextBytes_with_UInt32;
var
  R : IRandom;
  i : Integer;
begin
    R := TRandom2.Create(0);
    for i:= 1 to 6 do
        BigInteger.Create(20,R);
end;


procedure TestBigIntRandom.TestTRandomNext;
var
  R : IRandom;
begin
  R := TRandom.Create($d000_0000_0000_0000);
end;


procedure TestBigIntRandom.TestTRandomNext_with_Flags;
var
  R   : IRandom;
begin
{$IFOPT R+}
{$DEFINE HasRangeChecks}
{$ENDIF}
{$IFOPT Q+}
{$DEFINE HasOverflowChecks}
{$ENDIF}

{$RANGECHECKS OFF}
{$OVERFLOWCHECKS OFF}

  R := TRandom2.Create($d000_0000_0000_0000);

{$IFDEF HasRangeChecks}
{$RANGECHECKS ON}
{$ENDIF}
{$IFDEF HasOverflowChecks}
{$OVERFLOWCHECKS ON}
{$ENDIF}
end;


procedure TestBigIntRandom.SetUp;
begin
end;

procedure TestBigIntRandom.TearDown;
begin
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestBigIntRandom.Suite);
end.





